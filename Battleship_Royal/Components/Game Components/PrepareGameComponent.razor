@inject ICustomHttpClientFactory Http
@inject ILogger<PrepareGameComponent> Logger
@inject NavigationManager Navigation
<EditForm Model="prepareGameRequest" OnValidSubmit="HandleValidSubmit" FormName="PrepareGame">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="player1">Player 1</label>
        <InputText class="form-control" id="player1" name="player1" @bind-Value="prepareGameRequest.PlayerNickName" />
    </div>
    <div>
        <label>
            <span class="label-text">Do you want a speed game?</span>
            <label class="switch">
                <input type="checkbox" @onchange="ToggleSpeedGame" />
                <span class="slider round"></span>
            </label>
        </label>
    </div>
    <div class="form-group">
        <label for="difficulty level">Difficulty level</label>
        <InputNumber class="form-control" id="difficulty level" name="difficulty level" @bind-Value="prepareGameRequest.DifficultyLevel" />
    </div>

    @if (prepareGameRequest.IsSpeedGame) // Updated to use model directly
    {
        <div class="form-group">
            <label for="timer">Timer</label>
            <InputNumber class="form-control" id="timer" name="timer" @bind-Value="prepareGameRequest.Timer" />
        </div>
    }

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private bool isDiv1Hidden = false; // Starts with false
    public PrepareGameVsComputerRequest prepareGameRequest { get; set; } = new PrepareGameVsComputerRequest();
    public PrepareGameVsComputerResponse? Response { get; set; }

    private void ToggleSpeedGame(ChangeEventArgs e)
    {
        if (e.Value is bool isSpeedGame)
        {
            prepareGameRequest.IsSpeedGame = isSpeedGame; // Set model property
            Console.WriteLine($"IsSpeedGame: {isSpeedGame}, isDiv1Hidden: {isDiv1Hidden}"); // Debug logging

        }
    }

    public async Task HandleValidSubmit()
    {
        Logger.LogInformation($"Form submitted with values: {prepareGameRequest}");

        if (prepareGameRequest.IsSpeedGame && prepareGameRequest.Timer <= 0)
        {
            Logger.LogWarning("Timer value must be greater than 0 for Speed Game.");
            return;
        }

        Logger.LogInformation($"Submitting game preparation request: {prepareGameRequest}");

        try
        {
            var client = Http.CreateClient("prepare-gamevscomputer");
            if (client == null)
            {
                Logger.LogError("Client is null");
                return;
            }
            var response = await client.PostAsJsonAsync("prepare-gamevscomputer", prepareGameRequest);

            if (response.IsSuccessStatusCode)
            {
                Response = await response.Content.ReadFromJsonAsync<PrepareGameVsComputerResponse>();
                Logger.LogInformation("Game prepared successfully.");
                Navigation.NavigateTo($"/set-game/{Response?.Data.GameId}");
            }
            else
            {
                Logger.LogError($"Failed to prepare game. Status Code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Exception occurred: {ex.Message}");
        }
    }
}
