@page "/set-game/{gameId}"

@using Battleship_Royal.GameLogic

<h3>Set Your Ships</h3>

<div class="game-board">
    @for (int row = 0; row < 10; row++)
    {
        <div class="board-row">
            @for (int col = 0; col < 10; col++)
            {
                var cell = GameBoard.Board[row, col];
                <div class="cell @(cell.HasShip ? "ship" : "") @(cell.IsHit ? "hit" : "")"
                     @onclick="() => OnCellClick(row, col)">
                </div>
            }
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">@errorMessage</div>
}

@code {
    
    public GameBoard GameBoard { get; set; } = new GameBoard(); 
    [Parameter]
    public string GameId { get; set; }
    private int shipLength;
    private List<(int Row, int Col)> shipCoordinates = new List<(int Row, int Col)>();
    private string? errorMessage;

    public void OnShipTypeSelected(int length)
    {
        shipLength = length;
        shipCoordinates.Clear(); 
        errorMessage = null; 
    }

    private void OnCellClick(int row, int col)
    {
        if (shipLength == 0) return;
        var cell = GameBoard.Board[row, col]; 

        
        if (cell.HasShip)
        {
            errorMessage = "This cell is already occupied. Choose another cell.";
            StateHasChanged(); 
            return;
        }

        shipCoordinates.Add((row, col));
        if (shipCoordinates.Count == shipLength)
        {
            try
            {
                GameBoard.PlaceShip(shipCoordinates);
                errorMessage = null; 
                shipCoordinates.Clear();
                StateHasChanged(); 
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    public void SetShipLength(int length)
    {
        shipLength = length;
        shipCoordinates.Clear(); 
    }
}
