@page "/register"

@inject ICustomHttpClientFactory Http
@inject ILogger<Register> Logger
@inject NavigationManager Navigation
@rendermode InteractiveServer 

<h3>Rejestracja nowego użytkownika</h3>

<EditForm Model="registrationRequest" OnValidSubmit="HandleValidSubmit" formname="registrationRequest">
    <DataAnnotationsValidatodr > </DataAnnotationsValidatodr>
    <ValidationSummary> </ValidationSummary>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText  
            class="form-control"
            @bind-Value="registrationRequest.Email" />
    </div>

    <div class="form-group">
        <label for="password">Hasło</label>
        <InputText  type="password" class="form-control" @bind-Value="registrationRequest.Password" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Potwierdź hasło</label>
        <InputText  type="password" class="form-control" @bind-Value="registrationRequest.ConfirmPassword" />
       </div>

    <div class="form-group">
        <label for="nickName" class="form-label">Nick</label>
        <InputText  class="form-control" @bind-Value="registrationRequest.NickName" />
      
    </div>

    <button type="submit" class="btn btn-primary">Zarejestruj się</button>
</EditForm>


@if (registrationResponse != null)
{
    <div class="alert alert-success mt-3">
        Użytkownik został pomyślnie zarejestrowany!
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    [SupplyParameterFromForm]
    public NewUserRegistrationRequest registrationRequest { get; set; } = new NewUserRegistrationRequest();
    public NewUserRegistrationResponse registrationResponse { get; set; }
    private string errorMessage;
    
    private async Task HandleValidSubmit()
    {
        try
        {
            var client = Http.CreateClient("register");

            var response = await client.PostAsJsonAsync("register", registrationRequest);
            Logger.LogInformation($"Rejestracja nowego użytkownika: {registrationRequest.Email}");

            if (response.IsSuccessStatusCode)
            {
                registrationResponse = await response.Content.ReadFromJsonAsync<NewUserRegistrationResponse>();
                errorMessage = null;
                Navigation.NavigateTo("login", true);
            }
            else
            {
                errorMessage = "Rejestracja nie powiodła się. Sprawdź dane.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
            Logger.LogError($"Błąd rejestracji: {ex.Message}");
        }
    }

}