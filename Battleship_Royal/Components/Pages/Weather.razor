@page "/weather"
@using System.ComponentModel.DataAnnotations
@using Battleship_Royal.Api.Requests.Players
@using Battleship_Royal.Api.Responses.Players
@inject HttpClient Http

<h3>Rejestracja nowego użytkownika</h3>

<EditForm Model="@registrationRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationRequest.Email" />
        <ValidationMessage For="@(() => registrationRequest.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Hasło</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registrationRequest.Password" />
        <ValidationMessage For="@(() => registrationRequest.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Potwierdź hasło</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registrationRequest.ConfirmPassword" />
        <ValidationMessage For="@(() => registrationRequest.ConfirmPassword)" />
    </div>

    <div class="mb-3">
        <label for="nickName" class="form-label">Nick</label>
        <InputText id="nickName" class="form-control" @bind-Value="registrationRequest.NickName" />
        <ValidationMessage For="@(() => registrationRequest.NickName)" />
    </div>

    <button type="submit" class="btn btn-primary">Zarejestruj się</button>
</EditForm>

@if (registrationResponse != null)
{
    <div class="alert alert-success mt-3">
        Użytkownik został pomyślnie zarejestrowany!
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private NewUserRegistrationRequest registrationRequest = new NewUserRegistrationRequest();
    private NewUserRegistrationResponse registrationResponse;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/register", registrationRequest);
            if (response.IsSuccessStatusCode)
            {
                registrationResponse = await response.Content.ReadFromJsonAsync<NewUserRegistrationResponse>();
                errorMessage = null; // Clear any previous error messages
            }
            else
            {
                errorMessage = "Rejestracja nie powiodła się. Sprawdź dane.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Wystąpił błąd: {ex.Message}";
        }
    }
}